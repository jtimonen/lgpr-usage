t1 <- seq(12, 72, by = 12)
t2 <- t1 + 3
n  <- length(t1)*2
f1 <- 0.03*t1 + sin(24*t1)
f2 <- 0.05*t2 + sin(24*t2)
t <- c(t1,t2)
f <- c(f1,f2)
sex <- rep(c("M", "F"), each=n/2)
df <- data.frame(t,f,sex)
ggplot(df, aes(x=t,y=f,group = sex, color = sex)) + geom_line(lty=2) + geom_point()
p <- ggplot(df, aes(x=t,y=f,group = sex, color = sex)) + geom_line(lty=2) + geom_point() +
theme_minimal()
p
p <- ggplot(df, aes(x=t,y=f,group = sex, color = sex)) + geom_line(lty=2) + geom_point() +
theme_minimal() + scale_color_brewer(type = "qual", palette = 6)
p
p <- ggplot(df, aes(x=t,y=f,group = sex, color = sex)) + geom_line(lty=2) + geom_point() +
theme_minimal() + scale_color_brewer(type = "qual", palette = 6) + xlab("age") +
ylab(expression(f^j))
p
source('~/CSB/Research/lgpr/lgpr-demos/misc/correction_demo.R')
p <- ggplot(df, aes(x=t,y=f,group = sex, color = sex)) + geom_line(lty=2) + geom_point() +
theme_minimal() + scale_color_brewer(type = "qual", palette = 6) + xlab("age") +
ylab(expression(f^{(j)}(age)))
p
p <- ggplot(df, aes(x=t,y=f,group = sex, color = sex)) + geom_line(lty=2) + geom_point() +
theme_minimal() + scale_color_brewer(type = "qual", palette = 6) + xlab("age") +
ylab(expression(f^{(j)}(age, sex)))
p
?kernel_smoothing
source('~/CSB/Research/lgpr/lgpr-demos/misc/correction_demo.R')
source('~/CSB/Research/lgpr/lgpr-demos/misc/correction_demo.R')
source('~/CSB/Research/lgpr/lgpr-demos/misc/correction_demo.R')
p
source('~/CSB/Research/lgpr/lgpr-demos/misc/correction_demo.R')
p
LTY
DF
DF
df
p <- ggplot(df, aes(x=t,y=f,group = legend, color = legend)) + geom_line(lty=LTY) + geom_point() +
theme_minimal() + scale_color_brewer(type = "qual", palette = 6) + xlab("age") +
ylab(expression(f^{(j)}(age, sex)))
p
library(ggplot2)
library(lgpr)
t1 <- seq(12, 72, by = 12)
t2 <- t1 + 3
n  <- length(t1)*2
f1 <- 0.03*t1 + sin(24*t1)
f2 <- 0.05*t2 + sin(24*t2)
t <- c(t1,t2)
f <- c(f1,f2)
legend <- rep(c("M", "F"), each=n/2)
ell1 <- 12
ell2 <- 1
tsm  <- seq(0,80,length.out = 100)
fsm1 <- lgpr:::kernel_smoothing(f, t, tsm, ell = ell1)
fsm2 <- lgpr:::kernel_smoothing(f, t, tsm, ell = ell2)
t <- c(t, tsm, tsm)
f <- c(f, fsm1, fsm2)
legend <- c(legend, rep("ell = 12", 100), rep("ell = 1", 100))
LTY <- c(rep(2, n), rep(1, 200))
df <- data.frame(t,f,legend, LTY)
p <- ggplot(df, aes(x=t,y=f,group = legend, color = legend, lty=LTY) + geom_line() + geom_point() +
theme_minimal() + scale_color_brewer(type = "qual", palette = 6) + xlab("age") +
ylab(expression(f^{(j)}(age, sex)))
p
p <- ggplot(df, aes(x=t,y=f,group = legend, color = legend, lty=LTY)) + geom_line() + geom_point() +
theme_minimal() + scale_color_brewer(type = "qual", palette = 6) + xlab("age") +
ylab(expression(f^{(j)}(age, sex)))
p
library(ggplot2)
library(lgpr)
t1 <- seq(12, 72, by = 12)
t2 <- t1 + 3
n  <- length(t1)*2
f1 <- 0.03*t1 + sin(24*t1)
f2 <- 0.05*t2 + sin(24*t2)
t <- c(t1,t2)
f <- c(f1,f2)
legend <- rep(c("M", "F"), each=n/2)
ell1 <- 12
ell2 <- 1
tsm  <- seq(0,80,length.out = 100)
fsm1 <- lgpr:::kernel_smoothing(f, t, tsm, ell = ell1)
fsm2 <- lgpr:::kernel_smoothing(f, t, tsm, ell = ell2)
t <- c(t, tsm, tsm)
f <- c(f, fsm1, fsm2)
legend <- c(legend, rep("ell = 12", 100), rep("ell = 1", 100))
LTY <- c(rep("2", n), rep("1", 200))
df <- data.frame(t,f,legend, LTY)
p <- ggplot(df, aes(x=t,y=f,group = legend, color = legend, lty=LTY)) + geom_line() + geom_point() +
theme_minimal() + scale_color_brewer(type = "qual", palette = 6) + xlab("age") +
ylab(expression(f^{(j)}(age, sex)))
p
library(ggplot2)
library(lgpr)
t1 <- seq(12, 72, by = 12)
t2 <- t1 + 3
n  <- length(t1)*2
f1 <- 0.03*t1 + sin(24*t1)
f2 <- 0.05*t2 + sin(24*t2)
t <- c(t1,t2)
f <- c(f1,f2)
legend <- rep(c("M", "F"), each=n/2)
ell1 <- 12
ell2 <- 4
tsm  <- seq(0,80,length.out = 100)
fsm1 <- lgpr:::kernel_smoothing(f, t, tsm, ell = ell1)
fsm2 <- lgpr:::kernel_smoothing(f, t, tsm, ell = ell2)
t <- c(t, tsm, tsm)
f <- c(f, fsm1, fsm2)
legend <- c(legend, rep("ell = 12", 100), rep("ell = 4", 100))
LTY <- c(rep("2", n), rep("1", 200))
df <- data.frame(t,f,legend, LTY)
p <- ggplot(df, aes(x=t,y=f,group = legend, color = legend, lty=LTY)) + geom_line() + geom_point() +
theme_minimal() + scale_color_brewer(type = "qual", palette = 6) + xlab("age") +
ylab(expression(f^{(j)}(age, sex)))
p
library(ggplot2)
library(lgpr)
t1 <- seq(12, 72, by = 12)
t2 <- t1 + 3
n  <- length(t1)*2
f1 <- 0.03*t1 + sin(24*t1)
f2 <- 0.05*t2 + sin(24*t2)
t <- c(t1,t2)
f <- c(f1,f2)
legend <- rep(c("M", "F"), each=n/2)
ell1 <- 24
ell2 <- 3
tsm  <- seq(0,80,length.out = 100)
fsm1 <- lgpr:::kernel_smoothing(f, t, tsm, ell = ell1)
fsm2 <- lgpr:::kernel_smoothing(f, t, tsm, ell = ell2)
t <- c(t, tsm, tsm)
f <- c(f, fsm1, fsm2)
legend <- c(legend, rep("ell = 24", 100), rep("ell = 3", 100))
LTY <- c(rep("2", n), rep("1", 200))
df <- data.frame(t,f,legend, LTY)
p <- ggplot(df, aes(x=t,y=f,group = legend, color = legend, lty=LTY)) + geom_line() + geom_point() +
theme_minimal() + scale_color_brewer(type = "qual", palette = 6) + xlab("age") +
ylab(expression(f^{(j)}(age, sex)))
p
source('~/CSB/Research/lgpr/lgpr-demos/misc/correction_demo.R')
p
shiny::runApp('CSB/Research/lgpr/lgpr-demos/viewer')
runApp('CSB/Research/lgpr/lgpr-demos/viewer')
devtools::install_github('jtimonen/lgpr', build_vignettes = TRUE)
devtools::install_github('jtimonen/lgpr', build_vignettes = TRUE)
Sys.getenv("R_LIBS_USER")
devtools::install_github('jtimonen/lgpr', build_vignettes = TRUE)
install.packages("digest")
install.packages("dplyr"
)
devtools::install_github('jtimonen/lgpr', build_vignettes = TRUE)
install.packages("processx")
devtools::install_github('jtimonen/lgpr', build_vignettes = TRUE)
library(devtools)
install_github("velocyto-team/velocyto.R")
library(rstan)
remove.packages("rstan")
if (file.exists(".RData")) file.remove(".RData")
install.packages("rstan", repos = "https://cloud.r-project.org/", dependencies = TRUE)
install.packages("devtools")
devtools::install_github('jtimonen/lgpr')
library(ggplot2)
library(ggpubr)
install.packages(repr)
install.packages("repr")
install.packages("IRkernel")
install.packages("installr")
library(installr)
uninstall.R('3.6.1')
uninstall.R('3.5.1')
uninstall.R('3.4.4')
install.packages("codetools")
install.packages("MASS")
install.packages('lme4')
install.packages('lmerTest')
install.packages('nlme')
install.packages(lattice)
install.packages('lattice')
sleepstudy
library(lme4)
sleepstudy
data('sleepstudy')
?data
data('sleepstudy', package = 'lme4')
dat <-data('sleepstudy', package = 'lme4')
dat
sleepstufy
sleepstudy
install.packages('boor')
install.packages('boot')
install.packages("boot")
install.packages('Matrix')
install.packages("Matrix")
install.packages("Matrix")
install.packages("Matrix")
install.packages('Matrix')
library(lgpr)
?plot_effect_times
set.seed(123)
relev           <- c(0,1,1,1,0,0)
effect_time_fun <- function(){rnorm(n = 1, mean = 36, sd = 4)}
obs_fun         <- function(t){min(t + stats::rexp(n = 1, rate = 0.05), 96 - 1e-5)}
simData <- simulate_data(N            = 12,
t_data       = seq(12, 96, by = 12),
covariates   = c(    0,2,2,2),
relevances   = relev,
lengthscales = c(18,24, 1, 18,18,18),
t_effect_range = effect_time_fun,
t_observed   = obs_fun,
snr          = 1)
FONT_SIZE <- 16
options(repr.plot.width=14, repr.plot.height=5)
plot_simdata(simData, nrow = 2, ncol = 6) + theme(text=element_text(size=FONT_SIZE))
options(repr.plot.width=10, repr.plot.height=8)
plot_components_simdata(simData, font_size = FONT_SIZE)
data <- simData$data
library(ggplot2)
simData
p2 <- prior_default()
p2$effect_time <- list(type="gamma_before_backwards", shape = 1, rate = 0.05)
f2 <- lgp(formula    = y ~ id + age + diseaseAge + z1 + z2 + z3,
data     = data,
prior    = p2,
iter     = 2000,
chains   = 4,
uncertain_effect_time = TRUE,
parallel = TRUE,
verbose  = FALSE,
likelihood = "none",
skip_postproc = TRUE)
plot_effect_times(f2)
p2$t_effect
p2 <- prior_default()
p2$effect_time <- list(type="gamma_before_backwards", shape = 1, rate = 0.05)
f2 <- lgp(formula    = y ~ id + age + diseaseAge + z1 + z2 + z3,
data     = data,
prior    = p2,
iter     = 2000,
chains   = 4,
uncertain_effect_time = TRUE,
parallel = TRUE,
verbose  = TRUE,
likelihood = "none",
skip_postproc = TRUE)
plot_effect_times(f2)
p2 <- prior_default()
p3$t_effect <- list(type="normal_whole", mu = 36, sigma = 4)
f2 <- lgp(formula    = y ~ id + age + diseaseAge + z1 + z2 + z3,
data     = data,
prior    = p2,
iter     = 2000,
chains   = 4,
uncertain_effect_time = TRUE,
parallel = TRUE,
verbose  = TRUE,
likelihood = "none",
skip_postproc = TRUE)
plot_effect_times(f2)
p2 <- prior_default()
p2$t_effect <- list(type="normal_whole", mu = 36, sigma = 4)
f2 <- lgp(formula    = y ~ id + age + diseaseAge + z1 + z2 + z3,
data     = data,
prior    = p2,
iter     = 2000,
chains   = 4,
uncertain_effect_time = TRUE,
parallel = TRUE,
verbose  = TRUE,
likelihood = "none",
skip_postproc = TRUE)
plot_effect_times(f2)
plot_effect_times(f2)
f2
plot_effect_times(f2)
plot(f2)
f2
plot_samples(f2)
set.seed(123)
relev           <- c(0,1,1,1,0,0)
effect_time_fun <- function(){rnorm(n = 1, mean = 36, sd = 4)}
obs_fun         <- function(t){min(t + stats::rexp(n = 1, rate = 0.05), 96 - 1e-5)}
simData <- simulate_data(N            = 12,
t_data       = seq(12, 96, by = 12),
covariates   = c(    0,2,2,2),
relevances   = relev,
lengthscales = c(18,24, 1, 18,18,18),
t_effect_range = effect_time_fun,
t_observed   = obs_fun,
snr          = 1)
library(lgpr)
set.seed(123)
relev           <- c(0,1,1,1,0,0)
effect_time_fun <- function(){rnorm(n = 1, mean = 36, sd = 4)}
obs_fun         <- function(t){min(t + stats::rexp(n = 1, rate = 0.05), 96 - 1e-5)}
simData <- simulate_data(N            = 12,
t_data       = seq(12, 96, by = 12),
covariates   = c(    0,2,2,2),
relevances   = relev,
lengthscales = c(18,24, 1, 18,18,18),
t_effect_range = effect_time_fun,
t_observed   = obs_fun,
snr          = 1)
data <- simData$data
p2 <- prior_default()
p2$t_effect <- list(type="gamma_before_backwards", shape = 1, rate = 0.05)
f2_prior <- lgp(formula    = y ~ id + age + diseaseAge + z1 + z2 + z3,
data     = data,
prior    = p2,
iter     = 2000,
chains   = 4,
uncertain_effect_time = TRUE,
parallel = TRUE,
verbose  = FALSE,
likelihood = "none",
skip_postproc = TRUE)
plot_effect_times(f2_prior)
p2 <- prior_default()
p2$t_effect <- list(type="normal_whole", mu = 36, sigma = 4)
f2_prior <- lgp(formula    = y ~ id + age + diseaseAge + z1 + z2 + z3,
data     = data,
prior    = p2,
iter     = 2000,
chains   = 4,
uncertain_effect_time = TRUE,
parallel = TRUE,
verbose  = FALSE,
likelihood = "none",
skip_postproc = TRUE)
plot_effect_times(f2_prior)
setwd("~/CSB/Research/lgpr/lgpr-figs/manuscript/create")
setwd("~/CSB/Research/lgpr/lgpr-figs/manuscript/create/app")
fn1 <- normalizePath(file.path('../../lgpr-usage/experiments/06_proteomics_data/A_basic/post/results_basic.rds'))
fn2 <- normalizePath(file.path('../../lgpr-usage/experiments/06_proteomics_data/B_heter/post/results_heter.rds'))
res1 <- readRDS(fn1)
res2 <- readRDS(fn2)
fn1 <- normalizePath(file.path('../../../../lgpr-usage/experiments/06_proteomics_data/A_basic/post/results_basic.rds'))
fn2 <- normalizePath(file.path('../../../../lgpr-usage/experiments/06_proteomics_data/B_heter/post/results_heter.rds'))
res1 <- readRDS(fn1)
res2 <- readRDS(fn2)
setwd("~/CSB/Research/lgpr/lgpr-figs/manuscript/create/helper")
fn1 <- normalizePath(file.path('../tables/results_basic.rds'))
fn2 <- normalizePath(file.path('../tables/results_heter.rds'))
res1 <- readRDS(fn1)
res2 <- readRDS(fn2)
fn1 <- normalizePath(file.path('../tables/res_basic.rds'))
fn2 <- normalizePath(file.path('../tables/res_heter.rds'))
res1 <- readRDS(fn1)
res2 <- readRDS(fn2)
res1
head(res1)
sel1 <- res1$selected
a  <- as.character(sel1[359])
a
grepl('id', a)
grepl('diseaseAge', a)
# Helper function
get_disprots <- function(res, thresh = -1, return_inds = FALSE){
sel <- res$selected
L <- length(sel)
has_eff <- rep(0, L)
for(i in 1:L){
a  <- as.character(sel[i])
ok <- grepl('diseaseAge', a)
if(ok){
if(thresh != -1){
aff <- res$N_aff[i]
}else{
aff <- 1
}
if(aff >= thresh){
has_eff[i] <- 1
}
}
}
idx   <- which(has_eff==1)
# Return
if(return_inds){
return(idx)
}else{
names <- res$name
names <- as.character(names[idx])
return(names)
}
}
# Get names of some interesting proteins
aa <- get_disprots(res1)
aa
length(aa)
bb <- get_disprots(res2, thresh = 1, return_inds = TRUE)
names(res2)
# Helper function
get_disprots <- function(res, thresh = -1, return_inds = FALSE){
sel <- res$selected
L <- length(sel)
has_eff <- rep(0, L)
for(i in 1:L){
a  <- as.character(sel[i])
ok <- grepl('diseaseAge', a)
if(ok){
if(thresh != -1){
aff <- res$N_b05[i]
}else{
aff <- 1
}
if(aff >= thresh){
has_eff[i] <- 1
}
}
}
idx   <- which(has_eff==1)
# Return
if(return_inds){
return(idx)
}else{
names <- res$name
names <- as.character(names[idx])
return(names)
}
}
# Get names of some interesting proteins
aa <- get_disprots(res1)
bb <- get_disprots(res2, thresh = 1, return_inds = TRUE)
bb
length(bb)
aa
bb <- get_disprots(res2, thresh = 1)
bb
length(aa)
length(bb)
b
bb
bb <- get_disprots(res2, thresh = 3)
bb
length(bb)
aa
aa==bb
aa %in% bb
?union
union(aa,bb)
intersect(aa,bb)
length(intersect(aa,bb))
# Get names of some interesting proteins
thresh <- 3
aa <- get_disprots(res1)
bb <- get_disprots(res2, thresh = thresh)
info <- paste0('Proteins found by homogeneous model: ', length(aa), '\n',
'Proteins found by heterogeneous model: ', length(bb), '\n',
'Intersection: ', length(intersect(aa,bb)), '\n')
cat(info)
info <- paste0('Proteins found by homogeneous model: ', length(aa), '\n',
'Proteins found by heterogeneous model: ', length(bb),
'using threshold of', thresh, 'affected individuals \n',
'Intersection: ', length(intersect(aa,bb)), '\n')
cat(info)
info <- paste0('Proteins found by homogeneous model: ', length(aa), '\n',
'Proteins found by heterogeneous model: ', length(bb),
' (using threshold of', thresh, 'affected individuals) \n',
'Intersection: ', length(intersect(aa,bb)), '\n')
cat(info)
# Get names of some interesting proteins
thresh <- 3
aa <- get_disprots(res1)
bb <- get_disprots(res2, thresh = thresh)
info <- paste0('Proteins found by homogeneous model: ', length(aa), '\n',
'Proteins found by heterogeneous model: ', length(bb),
' (using threshold of ', thresh, ' affected individuals) \n',
'Intersection: ', length(intersect(aa,bb)), '\n')
cat(info)
# Get names of some interesting proteins
thresh <- 6
aa <- get_disprots(res1)
bb <- get_disprots(res2, thresh = thresh)
info <- paste0('Proteins found by homogeneous model: ', length(aa), '\n',
'Proteins found by heterogeneous model: ', length(bb),
' (using threshold of ', thresh, ' affected individuals) \n',
'Intersection: ', length(intersect(aa,bb)), '\n')
cat(info)
# Get names of some interesting proteins
thresh <- 4
aa <- get_disprots(res1)
bb <- get_disprots(res2, thresh = thresh)
info <- paste0('Proteins found by homogeneous model: ', length(aa), '\n',
'Proteins found by heterogeneous model: ', length(bb),
' (using threshold of ', thresh, ' affected individuals) \n',
'Intersection: ', length(intersect(aa,bb)), '\n')
cat(info)
# Get names of some interesting proteins
thresh <- 3
aa <- get_disprots(res1)
bb <- get_disprots(res2, thresh = thresh)
info <- paste0('Proteins found by homogeneous model: ', length(aa), '\n',
'Proteins found by heterogeneous model: ', length(bb),
' (using threshold of ', thresh, ' affected individuals) \n',
'Intersection: ', length(intersect(aa,bb)), '\n')
cat(info)
aa
bb
source('~/CSB/Research/lgpr/lgpr-figs/manuscript/create/helper/get_found_disease_effects.R')
info <- paste0('Proteins found by homogeneous model: ', length(aa), '\n',
'Proteins found by heterogeneous model: ', length(bb),
' (using threshold of ', thresh, ' affected individuals) \n',
'Intersection: ', length(cc), '\n')
cat(info)
print(aa)
print(bb)
print(cc)
setwd("~/CSB/Research/lgpr/lgpr-figs/manuscript/create/tables")
