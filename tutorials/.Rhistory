simulateData(16,6,c(0,1),c("id","age"),c(1,1),snr=12)
simulateData(16,6,c(0,1,4),c("id","age","loc"),c(1,1,1),snr=12)
library(devtools)
devtools::github_install('jtimonen/lgpr')
devtools::install_github('jtimonen/lgpr')
library(lgpr)
?simulateData
source('~/Documents/csb/lgpr_use/experim.R')
res
res$out$model
res$true
source('~/Documents/csb/lgpr_use/experim.R')
dotR <- file.path(Sys.getenv("HOME"), ".R")
if (!file.exists(dotR)) dir.create(dotR)
MAKEVARS <- file.path(dotR, "Makevars")
if (!file.exists(MAKEVARS)) file.create(MAKEVARS)
cat(
"\nCXX14FLAGS=-O3 -mtune=native -march=native -Wno-unused-variable -Wno-unused-function  -Wno-unknown-pragmas",
"\nCC=clang",
"CXX14=clang++ -arch x86_64 -ftemplate-depth-256",
file = MAKEVARS,
sep = "\n",
append = TRUE
)
# print the contents to the console
cat(readLines(MAKEVARS), sep = "\n")
install.packages("pkgbuild")
pkgbuild::has_build_tools(debug = TRUE)
fx <- inline::cxxfunction( signature(x = "integer", y = "numeric" ) , '
return ScalarReal( INTEGER(x)[0] * REAL(y)[0] ) ;
' )
fx( 2L, 5 ) # should be 10
install.packages("rstan", repos = "https://cloud.r-project.org/", dependencies=TRUE)
version
library(rstan)
?rstan
devtools::install_github("jtimonen/lgpr")
library(lgpr)
?lgpr
?lgp
?kernel_se
install.packages("BiocManager")
BiocManager::install("pcaMethods")
devtools::install_github("velocyto-team/vecocyto.R")
devtools::install_github("velocyto-team/velocyto.R")
devtools::install_github('tractatus/velocyto.R')
brew install homebrew/science/hdf5 --enable-cxx
devtools::install_github('velocyto-team/velocyto.R')
devtools::install_github('velocyto-team/velocyto.R')
devtools::install_github('velocyto-team/velocyto.R')
devtools::install_github('velocyto-team/velocyto.R')
devtools::install_github('velocyto-team/velocyto.R')
devtools::install_github('tractatus/velocyto.R')
devtools::install_github('velocyto-team/velocyto.R')
install.packages("Rcpp")
install.packages("Rcpp")
devtools::install_github('velocyto-team/velocyto.R')
devtools::install_github('velocyto-team/velocyto.R')
devtools::install_github('velocyto-team/velocyto.R')
devtools::install_github('velocyto-team/velocyto.R')
library(velocyto.R)
# Download the preprocessed data which contains annotated
# spliced, unspliced and spanning read count matrices
ldat <- readRDS(url("http://pklab.med.harvard.edu/velocyto/chromaffin/ldat.rds"))
ldat <- lapply(ldat,function(x) {
colnames(x) <-  gsub("_unique.bam","",gsub(".*:","",colnames(x)))
x
})
# Download precomputed cluster assignment and t-SNE embeddings
# used in Furlan et al. (2017)
cell.colors <- readRDS(url("http://pklab.med.harvard.edu/velocyto/chromaffin/cell.colors.rds"))
emb <- readRDS(url("http://pklab.med.harvard.edu/velocyto/chromaffin/embedding.rds"))
# Filter the count matrices so that we only leave genes that exceed
# a certain threshold of minimum max-cluster average expression
emat <- ldat$spliced;    # exonic reads
nmat <- ldat$unspliced   # intronic reads
smat <- ldat$spanning;   # spanning reads (intron + exon)
emat <- filter.genes.by.cluster.expression(emat,cell.colors,min.max.cluster.average = 5)
nmat <- filter.genes.by.cluster.expression(nmat,cell.colors,min.max.cluster.average = 1)
smat <- filter.genes.by.cluster.expression(smat,cell.colors,min.max.cluster.average = 0.5)
# look at the resulting gene set
length(intersect(rownames(emat),rownames(nmat)))
?pca.velocity.plot
?ac
?pca.velocity.plot
rvel.qf <- gene.relative.velocity.estimates(emat,nmat,deltaT=1,kCells = 5,fit.quantile = 0.05)
pca.velocity.plot(rvel.qf,nPcs=5,plot.cols=2,cell.colors=ac(cell.colors,alpha=0.7),
cex=1.2,pcount=0.1,pc.multipliers=c(1,-1,-1,-1,-1))
pca.velocity.plot(rvel.qf,nPcs=5,plot.cols=2,cell.colors=ac(cell.colors,alpha=0.7),
cex=1.2,pcount=0.1,pc.multipliers=c(1,-1,-1,-1,-1))
ccol <- readRDS(url("http://pklab.med.harvard.edu/velocyto/chromaffin/cell.colors.rds"))
emb  <- readRDS(url("http://pklab.med.harvard.edu/velocyto/chromaffin/embedding.rds"))
acol <- ac(ccol, alpha=0.7)
# Filter the count matrices so that we only leave genes that exceed
# a certain threshold of minimum max-cluster average expression
emat <- ldat$spliced;    # exonic reads
nmat <- ldat$unspliced   # intronic reads
smat <- ldat$spanning;   # spanning reads (intron + exon)
emat <- filter.genes.by.cluster.expression(emat, ccol, min.max.cluster.average = 5)
nmat <- filter.genes.by.cluster.expression(nmat, ccol, min.max.cluster.average = 1)
smat <- filter.genes.by.cluster.expression(smat, ccol, min.max.cluster.average = 0.5)
velo <- gene.relative.velocity.estimates(emat, nmat, deltaT = 1,
kCells = 5, fit.quantile = 0.05)
pca.velocity.plot(velo, nPcs=5, plot.cols = 2, cell.colors=acol,
cex=1.2, pcount=0.1)
pca.velocity.plot(velo, nPcs = 2, cell.colors = acol, pcount=0.1)
pca.velocity.plot(velo, nPcs = 2, cell.colors = acol, pcount=0.1, pc.multipliers = c(1,-1))
library(velocyto.R)
# Download the preprocessed data which contains annotated
# spliced, unspliced and spanning read count matrices
ldat <- readRDS(url("http://pklab.med.harvard.edu/velocyto/chromaffin/ldat.rds"))
ldat <- lapply(ldat, function(x) {
colnames(x) <-  gsub("_unique.bam", "", gsub(".*:","",colnames(x)))
x
})
# Download precomputed cluster assignment and t-SNE embeddings
# used in Furlan et al. (2017)
ccol <- readRDS(url("http://pklab.med.harvard.edu/velocyto/chromaffin/cell.colors.rds"))
emb  <- readRDS(url("http://pklab.med.harvard.edu/velocyto/chromaffin/embedding.rds"))
acol <- ac(ccol, alpha=0.7)
# Filter the count matrices so that we only leave genes that exceed
# a certain threshold of minimum max-cluster average expression
emat <- ldat$spliced;    # exonic reads
nmat <- ldat$unspliced   # intronic reads
smat <- ldat$spanning;   # spanning reads (intron + exon)
emat <- filter.genes.by.cluster.expression(emat, ccol, min.max.cluster.average = 5)
nmat <- filter.genes.by.cluster.expression(nmat, ccol, min.max.cluster.average = 1)
smat <- filter.genes.by.cluster.expression(smat, ccol, min.max.cluster.average = 0.5)
velo <- gene.relative.velocity.estimates(emat, nmat, deltaT = 1,
kCells = 5, fit.quantile = 0.05)
pca.velocity.plot(velo, nPcs = 2, cell.colors = acol, pcount=0.1, pc.multipliers = c(1,-1))
velo <- gene.relative.velocity.estimates(emat, nmat, deltaT = 10,
kCells = 5, fit.quantile = 0.05)
pca.velocity.plot(velo, nPcs = 2, cell.colors = acol, pcount=0.1, pc.multipliers = c(1,-1))
?gene.relative.velocity.estimates
velo <- gene.relative.velocity.estimates(emat, nmat, deltaT = 100,
kCells = 5, fit.quantile = 0.05)
pca.velocity.plot(velo, nPcs = 2, cell.colors = acol, pcount=0.1, pc.multipliers = c(1,-1))
velo <- gene.relative.velocity.estimates(emat, nmat, deltaT = 1,
kCells = 1, fit.quantile = 0.05)
pca.velocity.plot(velo, nPcs = 2, cell.colors = acol, pcount=0.1, pc.multipliers = c(1,-1))
velo <- gene.relative.velocity.estimates(emat, nmat, deltaT = 1, deltaT2 = 1,
kCells = 1, fit.quantile = 0.05)
pca.velocity.plot(velo, nPcs = 2, cell.colors = acol, pcount = 0.1, pc.multipliers = c(1,-1))
velo <- gene.relative.velocity.estimates(emat, nmat, smat, deltaT = 1, deltaT2 = 1,
kCells = 1, fit.quantile = 0.05,
diagonal.quantiles = TRUE)
pca.velocity.plot(velo, nPcs = 2, cell.colors = acol, pcount = 0.1, pc.multipliers = c(1,-1))
velo <- gene.relative.velocity.estimates(emat, nmat, smat, deltaT = 1, deltaT2 = 1,
kCells = 1, fit.quantile = 0.05,
diagonal.quantiles = F)
pca.velocity.plot(velo, nPcs = 2, cell.colors = acol, pcount = 0.1, pc.multipliers = c(1,-1))
velo <- gene.relative.velocity.estimates(emat, nmat, deltaT = 1, deltaT2 = 1,
kCells = 1, fit.quantile = 0.05)
pca.velocity.plot(velo, nPcs = 2, cell.colors = acol, pcount = 0.1, pc.multipliers = c(1,-1))
?gene.relative.velocity.estimates
velo <- gene.relative.velocity.estimates(emat, nmat, deltaT = 1,
kCells = 1, fit.quantile = 0.05,
min.nmat.emat.slope = 0.1,
)
pca.velocity.plot(velo, nPcs = 2, cell.colors = acol, pcount = 0.1, pc.multipliers = c(1,-1))
velo <- gene.relative.velocity.estimates(emat, nmat, deltaT = 1,
kCells = 1, fit.quantile = 0.05,
min.nmat.emat.slope = 0.1,
min.nmat.emat.correlation = 1
)
pca.velocity.plot(velo, nPcs = 2, cell.colors = acol, pcount = 0.1, pc.multipliers = c(1,-1))
?gene.relative.velocity.estimates
velo <- gene.relative.velocity.estimates(emat, nmat, deltaT = 1,
kCells = 1, fit.quantile = 0.05,
min.nmat.emat.slope = 0.1,
min.nmat.emat.correlation = 0.1
)
pca.velocity.plot(velo, nPcs = 2, cell.colors = acol, pcount = 0.1, pc.multipliers = c(1,-1))
names(velo)
velo$kCells
velo$ko
colnames(velo$ko)
colnames(velo$ko$valid)
sum(velo$ko$valid)
velo <- gene.relative.velocity.estimates(emat, nmat, deltaT = 1,
kCells = 1, fit.quantile = 0.05,
)
pca.velocity.plot(velo, nPcs = 2, cell.colors = acol, pcount = 0.1, pc.multipliers = c(1,-1))
# Check how many genes were left
nGenes <- sum(velo$ko$valid)
cat(nGenes, "genes were left\n")
velo$projected
class(velo$projected)
dim(velo$current)
# Check how many genes were left
nGenes <- dim(velo$current)[1]
nCells <- dim(velo$current)[2]
cat("The data now contains", nGenes, "genes and", nCells, "cells.\n")
image(velo$current)
image(velo$current[1:300,])
image(velo$current[1:600,])
?image
image(velo$current[1:600,], xlab = "Cell", ylab = "Gene")
class(velo$current)
?dgMatrix
sort(velo$current)
class(sort(velo$current))
install.packages("devtools", dependencies = T)
library(devtools)
devtools::install_github("jtimonen/lgpr")
devtools::install_github("jtimonen/lgpr")
install.packages("callr")
install.packages("callr")
devtools::install_github("jtimonen/lgpr")
require(lgpr)
# 1) Generate data
set.seed(123)
simData <- simulate_data(N            = 16,
t_data       = seq(6, 36, by = 6),
covariates   = c(    2,2),
lengthscales = c(6,6,6,6),
relevances   = c(1,1,1,0),
names        = c("sex", "location"),
t_jitter     = 0.5)
# 2) Plot the data
data <- simData$data
plot_simdata(simData, componentwise = T)
# 3) Create the model
model <- lgp_model(formula = y ~ id + age + sex + location,
data    = data)
model
show(model)
print(model)
# 4) Fit the model
fit <- lgp_fit(model, iter = 800, chains = 1)
# 6) Look at the inferred components
plot(fit, model = model)
varsel(fit)
plot_relevances(fit)
# 7) Predict at test points t_test
t_test <- seq(0,40,length.out=100)
X_test <- create_test_points(model, t_test)
PRED   <- lgp_predict(model, fit, X_test)
# 8) Plot predictions
plot_predictions(model, PRED, componentwise = F)
# 1) Generate data
set.seed(123)
simData <- simulate_data(N            = 16,
t_data       = seq(6, 36, by = 6),
covariates   = c(    1,1,2,2),
lengthscales = c(6,6,1,1,6,6),
relevances   = c(1,1,1,0,1,0),
names        = c("bloodPh", "bloodPressure", "sex", "location"))
# 2) Plot the data
data <- simData$data
plot_simdata_components(simData, highlight = c("sex"))
plot_simdata(simData)
# 3) Create the model
model <- lgp_model(formula = y ~ id + age + bloodPh + bloodPressure + sex + location,
data    = data)
model
# 4) Fit the model
fit <- lgp_fit(model, iter = 800, chains = 1)
plot_relevances(fit)
# 6) Look at the inferred components
plot(fit, model = model)
plot_simdata(simData, componentwise = T)
# 1) Generate data
set.seed(123)
simData <- simulate_data(N            = 16,
t_data       = seq(6, 36, by = 6),
covariates   = c(    0, 2,2),
relevances   = c(1,1,1, 0,1),
lengthscales = c(6,6,1, 6,6),
onset_range  = c(16, 24),
names        = c("diseaseAge", "sex", "location"),
t_jitter     = 1)
# 2) Plot the data
data <- simData$data
plot_simdata_components(simData, highlight = c("disease"))
plot_simdata(simData)
plot_simdata(simData, componentwise = T)
# 3) Create the model
model <- lgp_model(formula = y ~ id + age + diseaseAge + sex + location,
data    = data)
model
# 4) Fit the model
fit <- lgp_fit(model, iter = 800, chains = 4)
# 6) Plot inferred covariate effects
plot(fit, model = model)
# 7) Predict at test points t_test
t_test <- seq(0, 40, length.out = 80)
X_test <- create_test_points(model, t_test)
PRED   <- lgp_predict(model, fit, X_test)
# 8) Plot predictions
plot_predictions(model, PRED)
# 8) Plot predictions
plot_predictions(model, PRED, componentwise = T)
# 1) Generate data
set.seed(12345)
simData <- simulate_data(N            = 16,
t_data       = c(6,12,18,24,30,36),
covariates   = c(    0, 2,2,2),
relevances   = c(1,1,1, 1,0,0),
lengthscales = c(6,6,1, 6,6,6),
noise_type   = "Gaussian",
onset_range  = c(12, 24),
snr          = 5,
N_affected   = 2,
t_jitter     = 1)
# 2) Plot data
data <- simData$data
plot_simdata(simData, vspace_multip = 0.3)
# 1) Generate data
set.seed(12345)
simData <- simulate_data(N            = 16,
t_data       = c(6,12,18,24,30,36),
covariates   = c(    0, 2,2,2),
relevances   = c(1,1,1, 1,0,0),
lengthscales = c(6,6,1, 6,6,6),
noise_type   = "Gaussian",
onset_range  = c(12, 24),
snr          = 5,
N_affected   = 2,
t_jitter     = 1)
# 2) Plot data
data <- simData$data
plot_simdata(simData, componentwise = T)
# 3) Create the model
model <- lgp_model(formula = y ~ id + age + diseaseAge + z1 + z2 + z3,
data    = data,
equal_effect = FALSE)
model
# 4) Fit the model
fit <- lgp_fit(model, iter = 1000, chains = 1)
# 5) Study posterior samples of beta
plot_samples(fit, regex_pars = "beta", type = "dens")
# 6) Plot inferred covariate effects
plot(fit, model = model)
# 7) Compute predictions outside data
t_test <- seq(0, 40, length.out=100)
X_test <- create_test_points(model, t_test)
PRED   <- lgp_predict(model, fit, X_test, params_type = "median")
# 8) Plot predictions (in original data scale)
plot_predictions(model, PRED)
# 8) Plot predictions (in original data scale)
plot_predictions(model, PRED, componentwise = F)
# 8) Plot predictions (in original data scale)
plot_predictions(model, PRED, componentwise = T)
set.seed(1234)
# 1) Generate data
simData <- simulate_data(N            = 16,
t_data       = c(6,12,18,24,30,36),
#t_data       = seq(3,30,by=1),
covariates   = c(    0,2,2,2),
relevances   = c(1,1,1,1,0,0),
lengthscales = c(6,6,1,6,6,6),
noise_type   = "Gaussian",
onset_range  = c(15, 15),
rho          = 0.5,
deterministic_disease_component = TRUE)
# 2) Plot the data
data <- simData$data
plot_simdata(simData, componentwise = T)
# 3) Create the model
my_prior <- defaultPrior()
my_prior$rho <- list(shape1 = 5, shape2 = 10)
model <- lgp_model(formula = y ~ id + age + diseaseAge + z1 + z2 + z3,
data    = data,
prior   = my_prior,
uncertain_diagnosis = TRUE)
# 3) Create the model
my_prior <- prior_default()
my_prior$rho <- list(shape1 = 5, shape2 = 10)
model <- lgp_model(formula = y ~ id + age + diseaseAge + z1 + z2 + z3,
data    = data,
prior   = my_prior,
uncertain_diagnosis = TRUE)
model
# 4) Fit the model
fit <- lgp_fit(model, iter = 800, chains = 1)
# 5) Visualize samples of T_diff
plot_onset(fit)
# 6) Visualize inferred covariate effects
plot(fit, model = model)
# 7) Compute predictions outside data
t_test <- seq(0, 40, length.out = 100)
X_test <- create_test_points(model, t_test)
PRED   <- lgp_predict(model, fit, X_test, params_type = "median")
# 8) Plot predictions (in original data scale)
plot_predictions(model, PRED)
# 8) Plot predictions (in original data scale)
plot_predictions(model, PRED, componentwise = T)
plot_simdata(simData, componentwise = T)
devtools::install_github("jtimonen/lgpr", build_vignettes =T)
?lgpr
require(lgpr)
?lgpr
set.seed(123)
simData <- simulate_data(N           = 16,
t_data       = seq(6, 36, by = 6),
covariates   = c(    2,2),
lengthscales = c(6,6,6,6),
relevances   = c(1,1,1,0),
names        = c("sex", "location"),
t_jitter     = 0.5)
data <- simData$data
plot_simdata(simData, componentwise = T)
fit <- lgp(formula  = y ~ id + age + sex + location,
data     = data,
iter     = 800,
chains   = 1)
sel <- varsel(fit)
plot(fit)
plot_components(fit)
plot_predictions(fit)
t_test <- seq(0, 40, length.out = 20)
X_test <- create_test_points(fit, t_test)
PRED   <- lgp_predict(fit, X_test, samples = "all")
plot_predictions(fit, PRED, componentwise = F)
plot_predictions(fit, PRED, componentwise = F, alpha_line = 0.2)
plot_predictions(fit, PRED, componentwise = F, alpha_line = 0.2, alpha = 0.4)
shiny::runApp('Documents/csb/lgpr/lgpr-demos/viewer')
install.packages(c("boot", "broom", "caTools", "checkmate", "clipr", "cluster", "cowplot", "curl", "dbplyr", "devtools", "dplyr", "DT", "evaluate", "forcats", "fs", "future", "ggrepel", "ggsignif", "git2r", "haven", "hdf5r", "highr", "httpuv", "igraph", "knitr", "later", "MASS", "Matrix", "mgcv", "modelr", "nlme", "openssl", "parsedate", "pillar", "polynom", "pracma", "processx", "progress", "rcmdcheck", "RcppArmadillo", "RCurl", "readxl", "remotes", "rhub", "rmarkdown", "rpart", "rsconnect", "rstudioapi", "rversions", "rvest", "shiny", "survival", "testthat", "tidyr", "tinytex", "usethis", "xfun", "xtable", "zoo"))
install.packages("Rcpp")
install.packages("Rcpp")
install.packages("dplyr")
shiny::runApp('Documents/csb/lgpr/lgpr-demos/viewer')
devtools::install_github('jtimonen/lgpr')
install.packages('callr')
install.packages("callr")
devtools::install_github('jtimonen/lgpr')
devtools::install_github('jtimonen/lgpr')
devtools::install_github('jtimonen/lgpr')
library(lgpr)
install.packages("rstan")
install.packages("rstan")
devtools::install_github('jtimonen/lgpr')
devtools::install_github('jtimonen/lgpr')
library(lgpr)
library(rstantools)
?rstantools
rstan_create_package('lgpr', stan_files = 'lgp.stan')
devtools::install_github('jtimonen/lgpr')
library(lgpr)
source('~/Documents/csb/lgpr/lgpr-figures/playground/warp_prior_test.R')
source('~/Documents/csb/lgpr/lgpr-figures/playground/warp_prior_test.R')
source('~/Documents/csb/lgpr/lgpr-figures/playground/warp_prior_test.R')
source('~/Documents/csb/lgpr/lgpr-figures/playground/warp_prior_test.R')
source('~/Documents/csb/lgpr/lgpr-figures/playground/warp_prior_test.R')
source('~/Documents/csb/lgpr/lgpr-figures/playground/warp_prior_test.R')
source('~/Documents/csb/lgpr/lgpr-figures/playground/warp_prior_test.R')
source('~/Documents/csb/lgpr/lgpr-figures/playground/warp_prior_test.R')
source('~/Documents/csb/lgpr/lgpr-figures/playground/warp_prior_test.R')
source('~/Documents/csb/lgpr/lgpr-figures/playground/warp_prior_test.R')
source('~/Documents/csb/lgpr/lgpr-figures/playground/warp_prior_test.R')
source('~/Documents/csb/lgpr/lgpr-figures/playground/warp_prior_test.R')
source('~/Documents/csb/lgpr/lgpr-figures/playground/warp_prior_test.R')
source('~/Documents/csb/lgpr/lgpr-figures/playground/warp_prior_test.R')
source('~/Documents/csb/lgpr/lgpr-figures/playground/warp_prior_test.R')
source('~/Documents/csb/lgpr/lgpr-figures/playground/warp_prior_test.R')
source('~/Documents/csb/lgpr/lgpr-figures/playground/warp_prior_test.R')
source('~/Documents/csb/lgpr/lgpr-figures/playground/warp_prior_test.R')
source('~/Documents/csb/lgpr/lgpr-figures/playground/warp_prior_test.R')
source('~/Documents/csb/lgpr/lgpr-figures/playground/warp_prior_test.R')
source('~/Documents/csb/lgpr/lgpr-figures/playground/warp_prior_test.R')
source('~/Documents/csb/lgpr/lgpr-figures/playground/warp_prior_test.R')
source('~/Documents/csb/lgpr/lgpr-figures/playground/warp_prior_test.R')
source('~/Documents/csb/lgpr/lgpr-figures/playground/warp_prior_test.R')
source('~/Documents/csb/lgpr/lgpr-figures/playground/warp_prior_test.R')
source('~/Documents/csb/lgpr/lgpr-figures/playground/warp_prior_test.R')
source('~/Documents/csb/lgpr/lgpr-figures/playground/warp_prior_test.R')
source('~/Documents/csb/lgpr/lgpr-figures/playground/warp_prior_test.R')
prior_default()
lgpr::prior_default()
source('~/Documents/csb/lgpr/lgpr-figures/playground/warp_prior_test.R')
source('~/Documents/csb/lgpr/lgpr-figures/playground/warp_prior_test.R')
source('~/Documents/csb/lgpr/lgpr-figures/playground/warp_prior_test.R')
devtools::install_github('jtimonen/lgpr')
devtools::install_github('jtimonen/lgpr')
library(lgpr)
devtools::install_github('jtimonen/lgpr')
ls
library(lgpr)
devtools::install_github('jtimonen/lgpr')
devtools::install_github('jtimonen/lgpr')
remove.packages("rstan")
if (file.exists(".RData")) file.remove(".RData")
Sys.setenv(MAKEFLAGS = "-j4") # four cores used
install.packages("rstan", type = "source")
remotes::install_github("stan-dev/rstan", ref = "develop",
subdir = "rstan/rstan", build_opts = "")
dlls <- getLoadedDLLs()
paths <- vapply(dlls, `[[`, "path", FUN.VALUE = character(1))
invisible(lapply(paths, function(path) {
if (!file.exists(path))
return(FALSE)
output <- system(paste("otool -L", shQuote(path), "| grep libc++ || true"),
intern = TRUE)
if (length(output) == 0)
return(FALSE)
writeLines(paste0(path, ":"))
writeLines(output)
}))
install.packages("rstan", type = "source")
install.packages("Rcpp")
install.packages("rstan", type = "source")
devtools::install_github('jtimonen/lgpr')
library(lgpr)
lgpr:::create_example_fit()
fit z- lgpr:::create_example_fit()
fit <- lgpr:::create_example_fit()
plot(fit)
plot_components_posterior(fit)
library(lgpr)
setwd("~/Documents/csb/research/lgpr/lgpr-usage/tutorials")
