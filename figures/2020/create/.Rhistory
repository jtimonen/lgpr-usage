vm_params    = c(0.025, 1),
force_zeromean = TRUE)
row2 <- plot_components_simdata(simData,
marker = NA,
nrow = 1, ncol = 6,
sum_highlight = "group",
legend = NULL)
full <- ggarrange(row1, row2, nrow = 2, ncol = 1, labels = "auto")
row2
full
dat<-simData$data
head(dat)
set.seed(12321)
simData <- simulate_data(N = 8, t_data = seq(6, 60, 0.25),
covariates   = c(0,1,2),
n_categs     = c(2),
names        = c("diseaseAge", "bloodPh", "sex"),
relevances   = c(1,1,1,1,1),
lengthscales = c(12,24,1,1,18),
steepness    = 0.5,
vm_params    = c(0.025, 1),
force_zeromean = TRUE)
row2 <- plot_components_simdata(simData,
marker = NA,
nrow = 1, ncol = 6,
sum_highlight = "group",
legend = NULL)
full <- ggarrange(row1, row2, nrow = 2, ncol = 1, labels = "auto")
set.seed(12321)
simData <- simulate_data(N = 8, t_data = seq(6, 60, 0.25),
covariates   = c(0,1,2),
n_categs     = c(2),
names        = c("diseaseAge", "bloodPressure", "sex"),
relevances   = c(1,1,1,1,1),
lengthscales = c(12,24,1,1,18),
steepness    = 0.5,
vm_params    = c(0.025, 1),
force_zeromean = TRUE)
row2 <- plot_components_simdata(simData,
marker = NA,
nrow = 1, ncol = 6,
sum_highlight = "group",
legend = NULL)
full <- ggarrange(row1, row2, nrow = 2, ncol = 1, labels = "auto")
full
dat<-simData$data
dat
head(dat)
s <-dat$sex
s
sum(s==1)
sum(s==2)
K <- simData$kernel_matrices
K
dim(K)
image(K[,,1])
# function for plotting kernel matrices
plotMatrix <- function(A, title = "Kernel matrix"){
A <- t(A)
longData <- melt(A)
#longData <- longData[longData$value!=0,]
h <- ggplot(longData, aes(x = Var2, y = Var1)) +
geom_raster(aes(fill=value)) +
scale_fill_gradientn(colors = viridis(n= 256)) +
labs(x="x", y="x'", title=title) +
theme_bw() + theme(axis.text.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks.x=element_blank(),
axis.ticks.y=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank())
h <- h + xlim(0, 800)
h <- h + theme(
panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_blank(),
panel.border = element_blank())
h <- h + theme(legend.position = c(0.22, 0.22)) +
theme(legend.title=element_text(size=7), legend.text=element_text(size=7)) +
theme(legend.key.size = unit(0.4, "cm"))
return(h)
}
KK <- simData$kernel_matrices
K_tot <- apply(KK, c(1,2), sum)
k1 <- plotMatrix(KK[,,1], title = "k_1")
k2 <- plotMatrix(KK[,,2], title = "k_2")
k3 <- plotMatrix(KK[,,3], title = "k_3")
k4 <- plotMatrix(KK[,,4], title = "k_4")
k5 <- plotMatrix(KK[,,5], title = "k_5")
k6 <- plotMatrix(K_tot, title = "k")
row3 <- ggarrange(k1, k2, k3, k4, k5, k6,
ncol = 6, nrow = 1)
# FULL PLOT ---------------------------------------------------------------
full <- ggarrange(row1, row2, row3, nrow = 3, ncol = 1, labels = "auto")
require(reshape2)
set.seed(12321)
simData <- simulate_data(N = 8, t_data = seq(6, 60, 0.25),
covariates   = c(0,1,2),
n_categs     = c(2),
names        = c("diseaseAge", "bloodPressure", "sex"),
relevances   = c(1,1,1,1,1),
lengthscales = c(12,24,1,1,18),
steepness    = 0.5,
vm_params    = c(0.025, 1),
force_zeromean = TRUE)
row2 <- plot_components_simdata(simData,
marker = NA,
nrow = 1, ncol = 6,
sum_highlight = "group",
legend = NULL)
# ROW 3 -------------------------------------------------------------------
# function for plotting kernel matrices
plotMatrix <- function(A, title = "Kernel matrix"){
A <- t(A)
longData <- melt(A)
#longData <- longData[longData$value!=0,]
h <- ggplot(longData, aes(x = Var2, y = Var1)) +
geom_raster(aes(fill=value)) +
scale_fill_gradientn(colors = viridis(n= 256)) +
labs(x="x", y="x'", title=title) +
theme_bw() + theme(axis.text.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks.x=element_blank(),
axis.ticks.y=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank())
h <- h + xlim(0, 800)
h <- h + theme(
panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_blank(),
panel.border = element_blank())
h <- h + theme(legend.position = c(0.22, 0.22)) +
theme(legend.title=element_text(size=7), legend.text=element_text(size=7)) +
theme(legend.key.size = unit(0.4, "cm"))
return(h)
}
KK <- simData$kernel_matrices
K_tot <- apply(KK, c(1,2), sum)
k1 <- plotMatrix(KK[,,1], title = "k_1")
k2 <- plotMatrix(KK[,,2], title = "k_2")
k3 <- plotMatrix(KK[,,3], title = "k_3")
k4 <- plotMatrix(KK[,,4], title = "k_4")
k5 <- plotMatrix(KK[,,5], title = "k_5")
k6 <- plotMatrix(K_tot, title = "k")
row3 <- ggarrange(k1, k2, k3, k4, k5, k6,
ncol = 6, nrow = 1)
# FULL PLOT ---------------------------------------------------------------
full <- ggarrange(row1, row2, row3, nrow = 3, ncol = 1, labels = "auto")
require(viridisLite)
# function for plotting kernel matrices
plotMatrix <- function(A, title = "Kernel matrix"){
A <- t(A)
longData <- melt(A)
#longData <- longData[longData$value!=0,]
h <- ggplot(longData, aes(x = Var2, y = Var1)) +
geom_raster(aes(fill=value)) +
scale_fill_gradientn(colors = viridis(n= 256)) +
labs(x="x", y="x'", title=title) +
theme_bw() + theme(axis.text.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks.x=element_blank(),
axis.ticks.y=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank())
h <- h + xlim(0, 800)
h <- h + theme(
panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_blank(),
panel.border = element_blank())
h <- h + theme(legend.position = c(0.22, 0.22)) +
theme(legend.title=element_text(size=7), legend.text=element_text(size=7)) +
theme(legend.key.size = unit(0.4, "cm"))
return(h)
}
KK <- simData$kernel_matrices
K_tot <- apply(KK, c(1,2), sum)
k1 <- plotMatrix(KK[,,1], title = "k_1")
k2 <- plotMatrix(KK[,,2], title = "k_2")
k3 <- plotMatrix(KK[,,3], title = "k_3")
k4 <- plotMatrix(KK[,,4], title = "k_4")
k5 <- plotMatrix(KK[,,5], title = "k_5")
k6 <- plotMatrix(K_tot, title = "k")
row3 <- ggarrange(k1, k2, k3, k4, k5, k6,
ncol = 6, nrow = 1)
simData <- simulate_data(N = 8, t_data = seq(6, 60, 0.5),
covariates   = c(0,1,2),
n_categs     = c(2),
names        = c("diseaseAge", "bloodPressure", "sex"),
relevances   = c(1,1,1,1,1),
lengthscales = c(12,24,1,1,18),
steepness    = 0.5,
vm_params    = c(0.025, 1),
force_zeromean = TRUE,
verbose      = TRUE)
library(lgpr)
library(bayesplot)
library(ggplot2)
library(ggpubr)
require(reshape2)
require(viridisLite)
# ROW 1 -------------------------------------------------------------------
# Create MCMC samples 3d illustration
f <- lgpr:::create_example_fit(N = 6, iter = 1000, chains = 3)
df <- as.data.frame(f@stan_fit)
p1 <- df$`alpha_idAge[1]`
p2 <- df$`ell_idAge[1]`
p3 <- df$`sigma_n[1]`
lp <- df$lp__
DF <- data.frame(p1, p2, lp)
plot_mcmc <- ggplot(DF, aes(x=p1,y=p2,color=lp)) + geom_point() +
scale_colour_viridis_c() + theme_classic() +
xlab(expression(theta[1])) + ylab(expression(theta[2])) +
theme(axis.text = element_blank(),
axis.ticks = element_blank())
row1 <- ggarrange(plot_mcmc, nrow = 1, ncol = 4)
set.seed(12321)
simData <- simulate_data(N = 8, t_data = seq(6, 60, 0.5),
covariates   = c(0,1,2),
n_categs     = c(2),
names        = c("diseaseAge", "bloodPressure", "sex"),
relevances   = c(1,1,1,1,1),
lengthscales = c(12,24,1,1,18),
steepness    = 0.5,
vm_params    = c(0.025, 1),
force_zeromean = TRUE,
verbose      = TRUE)
library(lgpr)
library(bayesplot)
library(ggplot2)
library(ggpubr)
require(reshape2)
require(viridisLite)
# ROW 1 -------------------------------------------------------------------
# Create MCMC samples 3d illustration
f <- lgpr:::create_example_fit(N = 6, iter = 1000, chains = 3)
df <- as.data.frame(f@stan_fit)
p1 <- df$`alpha_idAge[1]`
p2 <- df$`ell_idAge[1]`
p3 <- df$`sigma_n[1]`
lp <- df$lp__
DF <- data.frame(p1, p2, lp)
plot_mcmc <- ggplot(DF, aes(x=p1,y=p2,color=lp)) + geom_point() +
scale_colour_viridis_c() + theme_classic() +
xlab(expression(theta[1])) + ylab(expression(theta[2])) +
theme(axis.text = element_blank(),
axis.ticks = element_blank()) +
ggtitle('MCMC sampling')
# Create user input frame
input <- ggplot() + theme_void()
# Create relevance determination frame
relev <- ggplot() + theme_void()
# Create visualization frame
vis <- ggplot() + theme_void()
row1 <- ggarrange(input, plot_mcmc,
relev, vis, nrow = 1, ncol = 5)
# ROW 2 -------------------------------------------------------------------
set.seed(123211)
simData <- simulate_data(N = 8, t_data = seq(0.5, 60, 0.5),
covariates   = c(0,1,2),
n_categs     = c(2),
names        = c("diseaseAge", "bloodPressure", "sex"),
relevances   = c(1,1,1,1,1),
lengthscales = c(12,24,1,1,18),
steepness    = 0.5,
t_effect_range = c(20,40),
vm_params    = c(0.025, 1),
force_zeromean = TRUE,
verbose      = TRUE)
row2a <- plot_components_simdata(simData,
marker = NA,
nrow = 2, ncol = 3,
sum_highlight = "group")
row2b <- plot_components_simdata(simData,
marker = NA,
nrow   = 2, ncol = 3,
sum_highlight = "group",
time_is_xvar = FALSE)
row2 <- ggarrange(row2a, row2b, ncol = 2, nrow = 1, labels = c("b", "c"))
dat <- simData$data
age <- dat$age
bloodPressure  <- dat$bloodPressure
da  <- dat$diseaseAge
id  <- as.factor(dat$id)
DF  <- data.frame(id, age, bloodPressure, da)
row3a <- ggplot(DF, aes(x = age, y = bp, group = id)) + geom_line() +
theme_linedraw()
row3 <- ggarrange(row3a, nrow = 1, ncol = 3)
# FULL PLOT ---------------------------------------------------------------
full <- ggarrange(row1, row2, row3, nrow = 3, ncol = 1,
labels = c("a", " ", " ", "d"),
heights = c(1, 2.25, 1.35))
dat <- simData$data
age <- dat$age
bloodPressure  <- dat$bloodPressure
da  <- dat$diseaseAge
id  <- as.factor(dat$id)
DF  <- data.frame(id, age, bloodPressure, da)
row3a <- ggplot(DF, aes(x = age, y = bloodPressure, group = id)) + geom_line() +
theme_linedraw()
row3 <- ggarrange(row3a, nrow = 1, ncol = 3)
# FULL PLOT ---------------------------------------------------------------
full <- ggarrange(row1, row2, row3, nrow = 3, ncol = 1,
labels = c("a", " ", " ", "d"),
heights = c(1, 2.25, 1.35))
full
full
riw1
row1
library(lgpr)
library(bayesplot)
library(ggplot2)
library(ggpubr)
require(reshape2)
require(viridisLite)
# ROW 1 -------------------------------------------------------------------
# Create MCMC samples 3d illustration
f <- lgpr:::create_example_fit(N = 6, iter = 1000, chains = 3)
df <- as.data.frame(f@stan_fit)
p1 <- df$`alpha_idAge[1]`
p2 <- df$`ell_idAge[1]`
p3 <- df$`sigma_n[1]`
lp <- df$lp__
DF <- data.frame(p1, p2, lp)
plot_mcmc <- ggplot(DF, aes(x=p1,y=p2,color=lp)) + geom_point() +
scale_colour_viridis_c() + theme_classic() +
xlab(expression(theta[1])) + ylab(expression(theta[2])) +
theme(axis.text = element_blank(),
axis.ticks = element_blank()) +
ggtitle('MCMC sampling')
# Create user input frame
input <- ggplot() + theme_void()
# Create relevance determination frame
relev <- ggplot() + theme_void()
# Create visualization frame
vis <- ggplot() + theme_void()
row1 <- ggarrange(input, plot_mcmc,
relev, vis, nrow = 1, ncol = 5)
# ROW 2 -------------------------------------------------------------------
set.seed(123211)
simData <- simulate_data(N = 8, t_data = seq(0.5, 60, 0.5),
covariates   = c(0,1,2),
n_categs     = c(2),
names        = c("diseaseAge", "bloodPressure", "sex"),
relevances   = c(1,1,1,1,1),
lengthscales = c(12,24,1,1,18),
steepness    = 0.5,
t_effect_range = c(20,40),
vm_params    = c(0.025, 1),
force_zeromean = TRUE,
verbose      = TRUE)
row2a <- plot_components_simdata(simData,
marker = NA,
nrow = 2, ncol = 3,
sum_highlight = "group")
row2b <- plot_components_simdata(simData,
marker = NA,
nrow   = 2, ncol = 3,
sum_highlight = "group",
time_is_xvar = FALSE)
row2 <- ggarrange(row2a, row2b, ncol = 2, nrow = 1, labels = c("b", "c"))
dat <- simData$data
age <- dat$age
bloodPressure  <- dat$bloodPressure
da  <- dat$diseaseAge
id  <- as.factor(dat$id)
DF  <- data.frame(id, age, bloodPressure, da)
row3a <- ggplot(DF, aes(x = age, y = bloodPressure, group = id)) + geom_line() +
theme_linedraw()
row3 <- ggarrange(row3a, nrow = 1, ncol = 3)
# FULL PLOT ---------------------------------------------------------------
full <- ggarrange(row1, row2, row3, nrow = 3, ncol = 1,
labels = c("a", " ", " ", "d"),
heights = c(1, 2.25, 1.35))
full
dat <- simData$data
age <- dat$age
bloodPressure  <- dat$bloodPressure
da  <- dat$diseaseAge
id  <- as.factor(dat$id)
DF  <- data.frame(id, age, bloodPressure, da)
row3a <- ggplot(DF, aes(x = age, y = bloodPressure, group = id)) + geom_line() +
theme_linedraw() + title(" ")
row3b <- ggplot(DF, aes(x = age, y = diseaseAge, group = id)) + geom_line() +
theme_linedraw() + title(" ")
row3 <- ggarrange(row3a, row3b, nrow = 1, ncol = 4)
# FULL PLOT ---------------------------------------------------------------
full <- ggarrange(row1, row2, row3, nrow = 3, ncol = 1,
labels = c("a", " ", " ", "d"),
heights = c(1, 2.25, 1.35))
dat <- simData$data
age <- dat$age
bloodPressure  <- dat$bloodPressure
diseaseAge  <- dat$diseaseAge
id  <- as.factor(dat$id)
DF  <- data.frame(id, age, bloodPressure, da)
row3a <- ggplot(DF, aes(x = age, y = bloodPressure, group = id)) + geom_line() +
theme_linedraw() + title(" ")
row3b <- ggplot(DF, aes(x = age, y = diseaseAge, group = id)) + geom_line() +
theme_linedraw() + title(" ")
row3 <- ggarrange(row3a, row3b, nrow = 1, ncol = 4)
# FULL PLOT ---------------------------------------------------------------
full <- ggarrange(row1, row2, row3, nrow = 3, ncol = 1,
labels = c("a", " ", " ", "d"),
heights = c(1, 2.25, 1.35))
full
row3a <- ggplot(DF, aes(x = age, y = bloodPressure, group = id)) + geom_line() +
theme_linedraw() + ggtitle(" ")
row3b <- ggplot(DF, aes(x = age, y = diseaseAge, group = id)) + geom_line() +
theme_linedraw() + ggtitle(" ")
row3 <- ggarrange(row3a, row3b, nrow = 1, ncol = 4)
full <- ggarrange(row1, row2, row3, nrow = 3, ncol = 1,
labels = c("a", " ", " ", "d"),
heights = c(1, 2.25, 1.35))
full
?rnorm
rnorm(mean = 0.5, sd = 0.1)
rnorm(n = 1000, mean = 0.5, sd = 0.1)
a<.rnorm(n = 1000, mean = 0.5, sd = 0.1)
a<-rnorm(n = 1000, mean = 0.5, sd = 0.1)
plot(a)
install.packages('ggplot2')
install.packages("rstan", repos = "https://cloud.r-project.org/", dependencies = TRUE)
install.packages("bayesplot")
install.packages("bayesplot")
install.packages("rstan", repos = "https://cloud.r-project.org/", dependencies = TRUE)
devtools::install_github('jtimonen/lgpr')
install.packages('devtools')
library(lgpr)
devtools::install_github('jtimonen/lgpr')
library(lgpr)
?lgpr
bayesplot::color_scheme_get("red")$dark
bayesplot::color_scheme_get("red")$dark
?scale_color_discrete
devtools::document()
devtools::install_github('jtimonen/lgpr')
devtools::install_github('jtimonen/lgpr')
install.packages("IRKernel")
install.packages("IRkernel")
ls
IRkernel::installspec()
?lgpr
library(lgpr)
devtools::install_github('jtimonen/lgpr')
devtools::install_github('jtimonen/lgpr')
devtools::install_github('jtimonen/lgpr')
devtools::install_github('jtimonen/lgpr')
library(lgpr)
?plot_posterior_f
?rep
?plot_posterior_y
install.packages('lme4')
?plot_posterior_f
ls
devtools::install_github('jtimonen/lgpr')
library(lgpr)
?lgpr
?`lgpr-package`
usethis::use_devtools()
install.packages('ggplot2')
install.packages('bayesplot')
install.packages('MASS')
remove.packages("rstan")
if (file.exists(".RData")) file.remove(".RData")
install.packages("rstan", repos = "https://cloud.r-project.org/", dependencies = TRUE)
library(devtools)
install_github('jtimonen/lgpr')
library(lgpr)
?lgprr
?lgpr
install.packages(c("caTools", "covr", "curl", "DT", "igraph", "IRkernel", "knitr", "mime", "pROC", "repr", "rmarkdown", "roxygen2", "rsconnect", "rversions", "shinyjs", "StanHeaders", "testthat", "threejs", "tinytex", "xfun", "xts", "zoo"))
library(lgpr)
library(lgpr)
f<-create_example_fit()
plot_posterior_f(f)
?plot_posterior_f
setwd("~/csb/research/lgpr/lgpr-usage/figures/2020/create")
source('/m/home/home5/56/timonej3/unix/csb/research/lgpr/lgpr-usage/figures/2020/create/priors.R')
plt
library(lgpr)
###
library(lgpr)
dp <- prior_default()
p1 <- check_warp_prior(dp)
dp$warp_steepness <- list(type="inv-gamma", scale=20, shape=16)
p2 <- check_warp_prior(dp)
plots <- ggarrange(p1, p2, nrows = 2, ncol = 1)
p1
p2
###
library(lgpr)
dp <- prior_default()
p1 <- check_warp_prior(dp)
dp$warp_steepness <- list(type="inv-gamma", scale=20, shape=16)
p2 <- check_warp_prior(dp, L = 12)
plots <- ggarrange(p1, p2, nrow = 2, ncol = 1)
plots
###
library(lgpr)
dp <- prior_default()
p1 <- check_warp_prior(dp)
dp$warp_steepness <- list(type="inv-gamma", shape=20, scale=16)
p2 <- check_warp_prior(dp, L = 12)
plots <- ggarrange(p1, p2, nrow = 2, ncol = 1)
plots
###
library(lgpr)
dp <- prior_default()
p1 <- check_warp_prior(dp, IQR = 0.99)
dp$warp_steepness <- list(type="inv-gamma", shape=20, scale=16)
p2 <- check_warp_prior(dp, L = 12, IQR = 0.99)
plots <- ggarrange(p1, p2, nrow = 2, ncol = 1)
plots
