panel.border = element_blank())
return(h)
}
plotMatrix(K)
# function for plotting kernel matrices
plotMatrix <- function(A, title = "Kernel matrix"){
longData <- melt(A)
#longData <- longData[longData$value!=0,]
h <- ggplot(longData, aes(x = Var2, y = Var1)) +
geom_raster(aes(fill=value)) +
scale_fill_gradientn(colors = viridis(n= 256)) +
labs(x="x", y="x'", title=title) +
theme_bw() + theme(axis.text.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks.x=element_blank(),
axis.ticks.y=element_blank())
h <- h + xlim(0, 800)
h <- h + theme(
panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_blank(),
panel.border = element_blank())
return(h)
}
plotMatrix(K)
sum(KK,3)
sum(KK,c(1,2))
apply(KK, c(1,2), sum)
aa<-apply(KK, c(1,2), sum)
dim(aa)
K_tot <- apply(KK, c(1,2), sum)
k1 <- plotMatrix(KK[,,1], title = "k_1")
k2 <- plotMatrix(KK[,,2], title = "k_2")
k3 <- plotMatrix(KK[,,3], title = "k_3")
k4 <- plotMatrix(KK[,,4], title = "k_4")
k5 <- plotMatrix(KK[,,5], title = "k_5")
k6 <- plotMatrix(K_tot, title = "k")
plot1 <- ggarrange(p1, p2, p3, p4, p5, p6,
k1, k2, k3, k4, k5, k6,
ncol = 6,
nrow = 2,
labels = c("a", "b", "c", "d", "e", "f"))
plot1
source('~/CSB/Research/lgpr/lgpr-demos/figures/illustration/manuscript/create_illustration.R')
plot2
plot1
source('~/CSB/Research/lgpr/lgpr-demos/figures/illustration/manuscript/create_illustration.R')
plot1
plot2
plot2
plot2
plot2
source('~/CSB/Research/lgpr/lgpr-demos/figures/illustration/manuscript/create_illustration_3.R')
source('~/CSB/Research/lgpr/lgpr-demos/figures/illustration/manuscript/create_illustration_3.R')
source('~/CSB/Research/lgpr/lgpr-demos/figures/illustration/manuscript/create_illustration_3.R')
p
library(lgpr)
library(lgpr)
?lgpr
## Modeling the uncertainty of the disease onset
# define functions for drawing real and observed onset time
onset_fun <- function(){rnorm(n = 1, mean = 40, sd = 2)}
obs_fun   <- function(t){t + rnorm(n=1, mean = 20, sd = 4)}
# simulate data
set.seed(123)
simData <- simulate_data(N            = 12,
t_data       = seq(12, 96, by = 12),
covariates   = c(    0,2,2),
relevances   = c(1,1,1, 0,1),
lengthscales = c(18,24, 1, 18,18),
onset_range  = onset_fun,
t_observed   = obs_fun,
snr          = 5)
data <- simData$data
plot_simdata(simData, componentwise = F)
plot_simdata(simData, componentwise = T)
## Modeling the uncertainty of the disease onset
# define functions for drawing real and observed onset time
onset_fun <- function(){rnorm(n = 1, mean = 40, sd = 2)}
obs_fun   <- function(t){t + rnorm(n=1, mean = 20, sd = 4)}
# simulate data
set.seed(123)
simData <- simulate_data(N            = 12,
t_data       = seq(12, 96, by = 12),
covariates   = c(    0,2,2),
relevances   = c(1,1,1, 0,1),
lengthscales = c(18,24, 1, 18,18),
onset_range  = onset_fun,
t_observed   = obs_fun,
snr          = 5)
data <- simData$data
plot_simdata(simData, componentwise = F)
plot_simdata(simData, componentwise = T)
## Modeling the uncertainty of the disease onset
# define functions for drawing real and observed onset time
onset_fun <- function(){rnorm(n = 1, mean = 40, sd = 2)}
obs_fun   <- function(t){t + rnorm(n=1, mean = 20, sd = 4)}
# simulate data
set.seed(1233)
simData <- simulate_data(N            = 12,
t_data       = seq(12, 96, by = 12),
covariates   = c(    0,2,2),
relevances   = c(1,1,1, 0,1),
lengthscales = c(18,24, 1, 18,18),
onset_range  = onset_fun,
t_observed   = obs_fun,
snr          = 5)
data <- simData$data
plot_simdata(simData, componentwise = F)
plot_simdata(simData, componentwise = T)
# define functions for drawing real and observed onset time
onset_fun <- function(){rnorm(n = 1, mean = 48, sd = 2)}
obs_fun   <- function(t){t + rnorm(n=1, mean = 20, sd = 4)}
# simulate data
set.seed(1233)
simData <- simulate_data(N            = 12,
t_data       = seq(12, 96, by = 12),
covariates   = c(    0,2,2),
relevances   = c(1,1,1, 0,1),
lengthscales = c(18,24, 1, 18,18),
onset_range  = onset_fun,
t_observed   = obs_fun,
snr          = 5)
data <- simData$data
plot_simdata(simData, componentwise = F)
plot_simdata(simData, componentwise = T)
## Modeling the uncertainty of the disease onset
# define functions for drawing real and observed onset time
onset_fun <- function(){rnorm(n = 1, mean = 36, sd = 4)}
obs_fun   <- function(t){min(t + stats::rgamma(n = 1, shape = 3, rate = 0.5), 96)}
# simulate data
set.seed(1233)
simData <- simulate_data(N            = 12,
t_data       = seq(12, 96, by = 12),
covariates   = c(    0,2,2),
relevances   = c(1,1,1, 0,1),
lengthscales = c(18,24, 1, 18,18),
onset_range  = onset_fun,
t_observed   = obs_fun,
snr          = 5)
data <- simData$data
plot_simdata(simData, componentwise = F)
plot_simdata(simData, componentwise = T)
plot_simdata(simData, componentwise = F)
?lgpr
library(lgpr)
?lgpr
require(lgpr)
set.seed(543)
simData <- simulate_data(N            = 12,
t_data       = seq(12, 72, by = 12),
covariates   = c(    2,2),
relevances   = c(1,1, 0,1),
lengthscales = c(18,24, 18,18),
names        = c("sex", "location"),
t_jitter     = 1,
snr          = 5)
data <- simData$data
plot_simdata(simData, componentwise = T)
plot_simdata(simData, componentwise = F)
# create and fit a model --------------------------------------------------
fit <- lgp(formula = y ~ id + age + sex + location,
data    = data,
iter    = 1000,
chains  = 1,
cat_kernel_type = "binary")
# create and fit a model --------------------------------------------------
fit <- lgp(formula = y ~ id + age + sex + location,
data    = data,
iter    = 1000,
chains  = 1,
cat_interaction_kernel_type = "binary")
# create and fit a model --------------------------------------------------
fit <- lgp(formula = y ~ id + age + sex + location,
data    = data,
iter    = 1000,
chains  = 1,
cat_interact_kernel_type = "binary")
# visualization -----------------------------------------------------------
plot_components(fit)
plot_components(fit, corrected = FALSE)
plot_components(fit, corrected = FALSE, sample_idx = 1)
source('~/CSB/Research/lgpr/lgpr-demos/misc/correction_demo.R')
plot_posterior_f(fit, PRED, n_sds = 2, componentwise = TRUE)
plot_posterior_y(fit, PRED, n_sds = 2)
plot_posterior_f(fit, PRED, n_sds = 2)
plot_simdata(simData, componentwise = T)
plot_simdata(simData, componentwise = F)
plot_posterior_f(fit, PRED, n_sds = 2, componentwise = TRUE)
?kernel_smoothing
source('~/CSB/Research/lgpr/lgpr-demos/misc/correction_demo.R')
ggplot(df, aes(x=t,y=f,group = sex, color = sex)) + geom_line()
source('~/CSB/Research/lgpr/lgpr-demos/misc/correction_demo.R')
ggplot(df, aes(x=t,y=f,group = sex, color = sex)) + geom_line()
source('~/CSB/Research/lgpr/lgpr-demos/misc/correction_demo.R')
ggplot(df, aes(x=t,y=f,group = sex, color = sex)) + geom_line()
source('~/CSB/Research/lgpr/lgpr-demos/misc/correction_demo.R')
ggplot(df, aes(x=t,y=f,group = sex, color = sex)) + geom_line()
source('~/CSB/Research/lgpr/lgpr-demos/misc/correction_demo.R')
f1
ggplot(df, aes(x=t,y=f,group = sex, color = sex)) + geom_line()
library(ggplot2)
t1 <- seq(12, 72, by = 6)
t2 <- t1 + 3
n  <- length(t1)*2
f1 <- 0.1*t1 + sin(24*t1)
f2 <- 0.05*t2 + sin(18*t2)
t <- c(t1,t2)
f <- c(f1,f2)
sex <- rep(c("M", "F"), each=n/2)
df <- data.frame(t,f,sex)
ggplot(df, aes(x=t,y=f,group = sex, color = sex)) + geom_line()
library(ggplot2)
t1 <- seq(12, 72, by = 6)
t2 <- t1 + 3
n  <- length(t1)*2
f1 <- 0.07*t1 + sin(24*t1)
f2 <- 0.05*t2 + sin(18*t2)
t <- c(t1,t2)
f <- c(f1,f2)
sex <- rep(c("M", "F"), each=n/2)
df <- data.frame(t,f,sex)
ggplot(df, aes(x=t,y=f,group = sex, color = sex)) + geom_line()
library(ggplot2)
t1 <- seq(12, 72, by = 6)
t2 <- t1 + 3
n  <- length(t1)*2
f1 <- 0.07*t1 + sin(24*t1)
f2 <- 0.05*t2 + sin(24*t2)
t <- c(t1,t2)
f <- c(f1,f2)
sex <- rep(c("M", "F"), each=n/2)
df <- data.frame(t,f,sex)
ggplot(df, aes(x=t,y=f,group = sex, color = sex)) + geom_line()
ggplot(df, aes(x=t,y=f,group = sex, color = sex)) + geom_line() + geom_point()
ggplot(df, aes(x=t,y=f,group = sex, color = sex)) + geom_line(lty=2) + geom_point()
library(ggplot2)
t1 <- seq(12, 72, by = 12)
t2 <- t1 + 3
n  <- length(t1)*2
f1 <- 0.07*t1 + sin(24*t1)
f2 <- 0.05*t2 + sin(24*t2)
t <- c(t1,t2)
f <- c(f1,f2)
sex <- rep(c("M", "F"), each=n/2)
df <- data.frame(t,f,sex)
ggplot(df, aes(x=t,y=f,group = sex, color = sex)) + geom_line(lty=2) + geom_point()
library(ggplot2)
t1 <- seq(12, 72, by = 12)
t2 <- t1 + 3
n  <- length(t1)*2
f1 <- 0.03*t1 + sin(24*t1)
f2 <- 0.05*t2 + sin(24*t2)
t <- c(t1,t2)
f <- c(f1,f2)
sex <- rep(c("M", "F"), each=n/2)
df <- data.frame(t,f,sex)
ggplot(df, aes(x=t,y=f,group = sex, color = sex)) + geom_line(lty=2) + geom_point()
p <- ggplot(df, aes(x=t,y=f,group = sex, color = sex)) + geom_line(lty=2) + geom_point() +
theme_minimal()
p
p <- ggplot(df, aes(x=t,y=f,group = sex, color = sex)) + geom_line(lty=2) + geom_point() +
theme_minimal() + scale_color_brewer(type = "qual", palette = 6)
p
p <- ggplot(df, aes(x=t,y=f,group = sex, color = sex)) + geom_line(lty=2) + geom_point() +
theme_minimal() + scale_color_brewer(type = "qual", palette = 6) + xlab("age") +
ylab(expression(f^j))
p
source('~/CSB/Research/lgpr/lgpr-demos/misc/correction_demo.R')
p <- ggplot(df, aes(x=t,y=f,group = sex, color = sex)) + geom_line(lty=2) + geom_point() +
theme_minimal() + scale_color_brewer(type = "qual", palette = 6) + xlab("age") +
ylab(expression(f^{(j)}(age)))
p
p <- ggplot(df, aes(x=t,y=f,group = sex, color = sex)) + geom_line(lty=2) + geom_point() +
theme_minimal() + scale_color_brewer(type = "qual", palette = 6) + xlab("age") +
ylab(expression(f^{(j)}(age, sex)))
p
?kernel_smoothing
source('~/CSB/Research/lgpr/lgpr-demos/misc/correction_demo.R')
source('~/CSB/Research/lgpr/lgpr-demos/misc/correction_demo.R')
source('~/CSB/Research/lgpr/lgpr-demos/misc/correction_demo.R')
p
source('~/CSB/Research/lgpr/lgpr-demos/misc/correction_demo.R')
p
LTY
DF
DF
df
p <- ggplot(df, aes(x=t,y=f,group = legend, color = legend)) + geom_line(lty=LTY) + geom_point() +
theme_minimal() + scale_color_brewer(type = "qual", palette = 6) + xlab("age") +
ylab(expression(f^{(j)}(age, sex)))
p
library(ggplot2)
library(lgpr)
t1 <- seq(12, 72, by = 12)
t2 <- t1 + 3
n  <- length(t1)*2
f1 <- 0.03*t1 + sin(24*t1)
f2 <- 0.05*t2 + sin(24*t2)
t <- c(t1,t2)
f <- c(f1,f2)
legend <- rep(c("M", "F"), each=n/2)
ell1 <- 12
ell2 <- 1
tsm  <- seq(0,80,length.out = 100)
fsm1 <- lgpr:::kernel_smoothing(f, t, tsm, ell = ell1)
fsm2 <- lgpr:::kernel_smoothing(f, t, tsm, ell = ell2)
t <- c(t, tsm, tsm)
f <- c(f, fsm1, fsm2)
legend <- c(legend, rep("ell = 12", 100), rep("ell = 1", 100))
LTY <- c(rep(2, n), rep(1, 200))
df <- data.frame(t,f,legend, LTY)
p <- ggplot(df, aes(x=t,y=f,group = legend, color = legend, lty=LTY) + geom_line() + geom_point() +
theme_minimal() + scale_color_brewer(type = "qual", palette = 6) + xlab("age") +
ylab(expression(f^{(j)}(age, sex)))
p
p <- ggplot(df, aes(x=t,y=f,group = legend, color = legend, lty=LTY)) + geom_line() + geom_point() +
theme_minimal() + scale_color_brewer(type = "qual", palette = 6) + xlab("age") +
ylab(expression(f^{(j)}(age, sex)))
p
library(ggplot2)
library(lgpr)
t1 <- seq(12, 72, by = 12)
t2 <- t1 + 3
n  <- length(t1)*2
f1 <- 0.03*t1 + sin(24*t1)
f2 <- 0.05*t2 + sin(24*t2)
t <- c(t1,t2)
f <- c(f1,f2)
legend <- rep(c("M", "F"), each=n/2)
ell1 <- 12
ell2 <- 1
tsm  <- seq(0,80,length.out = 100)
fsm1 <- lgpr:::kernel_smoothing(f, t, tsm, ell = ell1)
fsm2 <- lgpr:::kernel_smoothing(f, t, tsm, ell = ell2)
t <- c(t, tsm, tsm)
f <- c(f, fsm1, fsm2)
legend <- c(legend, rep("ell = 12", 100), rep("ell = 1", 100))
LTY <- c(rep("2", n), rep("1", 200))
df <- data.frame(t,f,legend, LTY)
p <- ggplot(df, aes(x=t,y=f,group = legend, color = legend, lty=LTY)) + geom_line() + geom_point() +
theme_minimal() + scale_color_brewer(type = "qual", palette = 6) + xlab("age") +
ylab(expression(f^{(j)}(age, sex)))
p
library(ggplot2)
library(lgpr)
t1 <- seq(12, 72, by = 12)
t2 <- t1 + 3
n  <- length(t1)*2
f1 <- 0.03*t1 + sin(24*t1)
f2 <- 0.05*t2 + sin(24*t2)
t <- c(t1,t2)
f <- c(f1,f2)
legend <- rep(c("M", "F"), each=n/2)
ell1 <- 12
ell2 <- 4
tsm  <- seq(0,80,length.out = 100)
fsm1 <- lgpr:::kernel_smoothing(f, t, tsm, ell = ell1)
fsm2 <- lgpr:::kernel_smoothing(f, t, tsm, ell = ell2)
t <- c(t, tsm, tsm)
f <- c(f, fsm1, fsm2)
legend <- c(legend, rep("ell = 12", 100), rep("ell = 4", 100))
LTY <- c(rep("2", n), rep("1", 200))
df <- data.frame(t,f,legend, LTY)
p <- ggplot(df, aes(x=t,y=f,group = legend, color = legend, lty=LTY)) + geom_line() + geom_point() +
theme_minimal() + scale_color_brewer(type = "qual", palette = 6) + xlab("age") +
ylab(expression(f^{(j)}(age, sex)))
p
library(ggplot2)
library(lgpr)
t1 <- seq(12, 72, by = 12)
t2 <- t1 + 3
n  <- length(t1)*2
f1 <- 0.03*t1 + sin(24*t1)
f2 <- 0.05*t2 + sin(24*t2)
t <- c(t1,t2)
f <- c(f1,f2)
legend <- rep(c("M", "F"), each=n/2)
ell1 <- 24
ell2 <- 3
tsm  <- seq(0,80,length.out = 100)
fsm1 <- lgpr:::kernel_smoothing(f, t, tsm, ell = ell1)
fsm2 <- lgpr:::kernel_smoothing(f, t, tsm, ell = ell2)
t <- c(t, tsm, tsm)
f <- c(f, fsm1, fsm2)
legend <- c(legend, rep("ell = 24", 100), rep("ell = 3", 100))
LTY <- c(rep("2", n), rep("1", 200))
df <- data.frame(t,f,legend, LTY)
p <- ggplot(df, aes(x=t,y=f,group = legend, color = legend, lty=LTY)) + geom_line() + geom_point() +
theme_minimal() + scale_color_brewer(type = "qual", palette = 6) + xlab("age") +
ylab(expression(f^{(j)}(age, sex)))
p
source('~/CSB/Research/lgpr/lgpr-demos/misc/correction_demo.R')
p
shiny::runApp('CSB/Research/lgpr/lgpr-demos/viewer')
runApp('CSB/Research/lgpr/lgpr-demos/viewer')
devtools::install_github('jtimonen/lgpr', build_vignettes = TRUE)
devtools::install_github('jtimonen/lgpr', build_vignettes = TRUE)
Sys.getenv("R_LIBS_USER")
devtools::install_github('jtimonen/lgpr', build_vignettes = TRUE)
install.packages("digest")
install.packages("dplyr"
)
devtools::install_github('jtimonen/lgpr', build_vignettes = TRUE)
install.packages("processx")
devtools::install_github('jtimonen/lgpr', build_vignettes = TRUE)
setwd("~/CSB/Research/lgpr/lgpr-usage/experiments/01_lme4")
#!/usr/bin/env Rscript
# This R script is meant to be called by a shell script with an integer argument
# For example:
#   n=$SLURM_ARRAY_TASK_ID
#   srun Rscript --vanilla [FILE_NAME].R $n
args   <- commandArgs(trailingOnly=TRUE)
idx_in <- args[1]
require(lgpr)
# Define a function that runs the experiment for one data set
runExperiment <- function(idx){
idx_num <- as.numeric(idx)
print(idx_num)
relev   <- c(1,1,1,0,0)
if(idx_num <= 100){
N <- 20
t_data <- seq(12, 60, length.out = 5)
}else if(idx_num <= 200){
N <- 30
t_data <- seq(6, 60, length.out = 10)
}else{
N <- 30
t_data <- seq(3, 60, length.out = 20)
}
print(N)
print(t_data)
simData <- simulate_data(N            = N,
t_data       = t_data,
covariates   = c(2,2,2),
relevances   = relev,
lengthscales = c(12,24,12,12,12),
t_jitter     = 0,
snr          = 0.2)
data <- simData$data
# lgpr
fit_lgp <- lgp(y ~ id + age + z1 + z2 + z3,
data    = data,
iter    = 1000,
chains  = 4,
refresh = 500)
rel <- fit_lgp@covariate_relevances$average
# Return
res <- list(rel   = rel,
real  = relev,
fit   = fit_lgp,
idx   = idx,
simData = simData)
return(res)
}
# Run the experiment
dir.create('res')
res <- runExperiment(idx_in)
fn  <- paste("res/lgpr_", idx_in, ".rds", sep="")
saveRDS(res, file = fn)
args
idx_in <- 1
# Define a function that runs the experiment for one data set
runExperiment <- function(idx){
idx_num <- as.numeric(idx)
print(idx_num)
relev   <- c(1,1,1,0,0)
if(idx_num <= 100){
N <- 20
t_data <- seq(12, 60, length.out = 5)
}else if(idx_num <= 200){
N <- 30
t_data <- seq(6, 60, length.out = 10)
}else{
N <- 30
t_data <- seq(3, 60, length.out = 20)
}
print(N)
print(t_data)
simData <- simulate_data(N            = N,
t_data       = t_data,
covariates   = c(2,2,2),
relevances   = relev,
lengthscales = c(12,24,12,12,12),
t_jitter     = 0,
snr          = 0.2)
data <- simData$data
# lgpr
fit_lgp <- lgp(y ~ id + age + z1 + z2 + z3,
data    = data,
iter    = 1000,
chains  = 4,
refresh = 500)
rel <- fit_lgp@covariate_relevances$average
# Return
res <- list(rel   = rel,
real  = relev,
fit   = fit_lgp,
idx   = idx,
simData = simData)
return(res)
}
# Run the experiment
dir.create('res')
res <- runExperiment(idx_in)
as.numeric(1)
# Run the experiment
dir.create('res')
res <- runExperiment(idx_in)
fn  <- paste("res/lgpr_", idx_in, ".rds", sep="")
saveRDS(res, file = fn)
setwd("~/CSB/Research/lgpr/lgpr-usage/experiments/01_lme4")
setwd("~/CSB/Research/lgpr/lgpr-usage/experiments/01_lme4")
